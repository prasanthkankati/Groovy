Vusers: Replica of a real user which mimics the real user behaviour.
Bottleneck : if a resource restrict to perform that issue is a bottleneck.
Scalability : scaling up or scaling down the capacity of the system whenever needed.
Latency: is the time taken to move the datapacket from source to destination.
Request Latency: time taken to reach the data from client to server.
Response latency: time taken to reach the data packets from server back to client.
Round trip latency: Request latency + Response latency.
Throughput: Number of trnscations/requests/data processed by system during the given time frame. it might be requests/sec (RPS) or KB/sec or transcations/sec (TPS) depends on the context.
Response time: time taken to receive the response after the rquest made. it includes time taken to send the reqest + processing by system + sending back to client says as round trip response time.
Saturation: peak point at which the maximum utilization of a resource occurs.
memory utilaztaion: percentage of the memory consumption to process a request.
CPU utilization: percentage of CPU computing power cosumed to process a request.
Concurent users: multiple usres are using the system at the same time but sending diffrent requests/performing diffrent tasks.
Simultationious users: multiple users ar3e using the system at the same time and also sending the same requests or doinsame task.
Think time: simulated time delay between two consequetive actions or requests to mimic the real user behaviour.
Peak time: anticipated busiest time of the server.
Peak load: (TTP: time to peak) highest expected user load on a sarver


***
Performance testing life cycle or process:

it includes 11 steps:

1. Requiremt gathering and analysis

in this phase we identify the performance golas such as response time, throuhput time, resource utilization by refering the BRS.
we understand the application archituture and infrastruture.
analyse the expected user patterns/use cases and workload models no of users load, type of tests, gegraphic location using the app.

2. planning and design

in this phase we define testing scope which is under scope which is out of scope.
objectives of testing and test strategy
testing approach we will be follwing
define the workload models and environment setup based on user behaviour.
identifying the risk, timeline, resources required.

3. Environment setup:

we make sure comparing the PROD and Testbeds which should as match as close to PROD environment.
necessary hardware and software and network we mirror with PROD env.

4. Tool selection

depend on the sills of resources
scope
extension
open source depend on these we choose tool

5. Test design
untit test
integration test
whole scenario testing
and verifying the test accuracy
test script generation depend on the real usage patters and senarios.
oprimiize the script using parametrzation and corelation.

6. Test execution

we do execute the scripts

7. Monitoring and analyis 

collect and monitor the KPI's such as response time, avarage time, resource utilization and objectives as part of SLA
identifying the bottle necks

8. Tuning & Optimization

Dev gives fix to tune apps

9. Retest:

we perform retest to verify the fix 
we also perform regression to check the overall helath of existing system

10. Reports:

we generate and create reports

11. Continous monotoring

we do moniotor the helath and report if any issues found

***
how to read a large json body for a POST, PUT, PATCH requests.

we create the json external file and keep the json bosy into it.
in the request body using ${__FileToString(pathof the file),(encryptionoptional),(variable optional)}
we provide the fuction then it will read from the file through function.

***
while doing Load test with 4K threads within 1hr we hold for 66 users per min instead of finishing the 66 users in seconds?

we use arrival thread group to achieve this

Testpalan > arrival thread group > arrivals/min or targetrate/min = 66 , Rampup = 1min, Rampup step count= 10, Hold traget rate time in min =60

it will launch 66 users per min and it holds for 1 hr.

***
how to corelate session ID or customer token ID while authenticating?

from one of the login request response we will see session id generated > we store the ID by writing a regexpression session_ID="(.*?)" > token as variable name so > from the next post requests we use the ${token} variable to post and use the same session ID stored cause it is dynamic in nature every logout it will change

***
